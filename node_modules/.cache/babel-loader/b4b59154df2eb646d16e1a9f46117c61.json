{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Furkan\\\\Desktop\\\\StackoverflowClient\\\\src\\\\Answers.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Answers = () => {\n  _s();\n\n  const [list, setList] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const params = useParams();\n  useEffect(() => {\n    setLoading(true);\n\n    const getAnswers = async () => {\n      const answersData = await fetch(`https://stackoverflowservervs.azurewebsites.net/Stackoverflow/getAnswersForQuestion?questionId=${params.id}`);\n      const answerJson = await answersData.json();\n      return answerJson.answers;\n    };\n\n    getAnswers().then(answer => {\n      setLoading(false);\n      setList(answer);\n    });\n\n    const getQuestion = async () => {\n      const questionData = await fetch(`https://stackoverflowservervs.azurewebsites.net/Stackoverflow/getQuestion?questionId=${params.id}`);\n      const questionJson = await questionData.json();\n      return questionJson.question;\n    };\n\n    getQuestion().then(question => {\n      setLoading(false);\n      setName(question.questionContent);\n    });\n  }, [params.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/spinner.gif\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            color: \"black\"\n          },\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: list.length === 0 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"This question has no answer yet. You can be the first!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 37\n        }, this) : list.map((item, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.answerContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 45\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 41\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          setList([...list, {\n            answerContent: e.target.newAnswer.value\n          }]);\n\n          const addAnswer = async () => {\n            await fetch(`https://stackoverflowservervs.azurewebsites.net/Stackoverflow/post_AddAnswer?questionId=${params.id}&answerContent=${e.target.newAnswer.value}`, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            });\n          };\n\n          addAnswer();\n          e.target.newAnswer.value = \"\";\n        },\n        className: \"addForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"newAnswer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Add Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Answers, \"IOjIf71WYo16b64lCQLsXlT3GT4=\", false, function () {\n  return [useParams];\n});\n\n_c = Answers;\nexport default Answers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"sources":["C:/Users/Furkan/Desktop/StackoverflowClient/src/Answers.js"],"names":["React","useState","useEffect","useParams","Answers","list","setList","name","setName","loading","setLoading","params","getAnswers","answersData","fetch","id","answerJson","json","answers","then","answer","getQuestion","questionData","questionJson","question","questionContent","color","length","map","item","i","answerContent","e","preventDefault","target","newAnswer","value","addAnswer","method","headers"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useParams } from \"react-router-dom\"\r\n\r\nconst Answers = () => {\r\n    const [list, setList] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        const getAnswers = async () => {\r\n            const answersData = await fetch(`https://stackoverflowservervs.azurewebsites.net/Stackoverflow/getAnswersForQuestion?questionId=${params.id}`)\r\n            const answerJson = await answersData.json();\r\n\r\n            return answerJson.answers;\r\n        }\r\n        getAnswers().then((answer) => {\r\n            setLoading(false)\r\n            setList(answer);\r\n        })\r\n\r\n        const getQuestion = async () => {\r\n            const questionData = await fetch(`https://stackoverflowservervs.azurewebsites.net/Stackoverflow/getQuestion?questionId=${params.id}`)\r\n            const questionJson = await questionData.json();\r\n\r\n            return questionJson.question;\r\n        }\r\n        getQuestion().then((question) => {\r\n            setLoading(false)\r\n            setName(question.questionContent);\r\n        })\r\n\r\n    }, [params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                loading ?\r\n                    <div className=\"spinner\">\r\n                        <img src=\"/spinner.gif\" alt=\"\" />\r\n                    </div>\r\n                    :\r\n                    <div className=\"answers\">\r\n                        <div className=\"header\">\r\n                            <h2 style={{ color: \"black\" }}>{name}</h2>\r\n                        </div>\r\n\r\n                        <ul>\r\n                            {\r\n                                list.length === 0 ?\r\n                                    <h4>This question has no answer yet. You can be the first!</h4>\r\n                                    :\r\n                                    list.map((item, i) =>\r\n                                        <li key={i}>\r\n                                            <span>{item.answerContent}</span>\r\n                                        </li>\r\n                                    )\r\n                            }\r\n                        </ul>\r\n\r\n                        <form onSubmit={e => {\r\n                            e.preventDefault();\r\n\r\n                            setList([...list, { answerContent: e.target.newAnswer.value }]);\r\n\r\n                            const addAnswer = async () => {\r\n                                await fetch(`https://stackoverflowservervs.azurewebsites.net/Stackoverflow/post_AddAnswer?questionId=${params.id}&answerContent=${e.target.newAnswer.value}`, {\r\n                                    method: \"POST\",\r\n                                    headers: {\r\n                                        \"Content-Type\": \"application/json\"\r\n                                    },\r\n                                });\r\n                            }\r\n                            addAnswer();\r\n                            e.target.newAnswer.value = \"\";\r\n\r\n                        }} className=\"addForm\">\r\n                            <input type=\"text\" name=\"newAnswer\" />\r\n                            <button>Add Answer</button>\r\n                        </form>\r\n\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Answers\r\n\r\n"]},"metadata":{},"sourceType":"module"}